//Smooth Hugger and very basic wave surfing combined

/*
 * combining wave surfing with smoothhugger

 * with the basic surfer on http://old.robowiki.net/robowiki?WaveSurfing/Tutorial
 */

/*
IMPROVEMENTS that could be made: 

Custom Event Hit walls - keeps losing energy as a byproduct of hitting the walls - I think there's code for avoiding walls. look into this

Against SmoothHugger - they end up on the same plane of motion - need to be on a little different fields to really battle each other 

Try to look at the math functions from Komarious - maybe add more detail into the wave surfing for events like hitting other robots, etc. 


*/

import robocode.*;
import robocode.util.Utils;
import java.awt.geom.*;     // for Point2D's
import java.lang.*;         // for Double and Integer objects
import java.util.ArrayList; // for collection of waves

public class robot extends AdvancedRobot{

	// nano sized wallhugging robot that uses wallsmoothing
	// movement - wallhugging with a VelocityTrick 
	// gun - uses a random linear gun

	/*Keeping TRACK OF: 
	 * Our location and the enemy location (of course).
The enemy's last known energy level (for detecting EnergyDrop).
A collection of waves, to surf and gather stats on. In GuessFactorTargeting, a GuessFactor's visit count is increased with every wave that passes the enemy; in WaveSurfing, when we are hit by a bullet, we increase the visit count for that GuessFactor, and try to avoid it in the future.
A collection of our direction in relation to the enemy in past ticks, 1 for clock-wise, -1 for counter-clockwise. The last direction they could have used for aiming is from 2 ticks ago.
A collection of past absolute bearings to enemy. The one used in an EnemyWave we detect is also from 2 ticks ago, as that's the last one they saw before their last gun turn.
Some info about the battle field for WallSmoothing.
	 * 
	 * 
	 */

	public static int BINS = 47;
	public static double _surfStats[] = new double[BINS];
	public Point2D.Double _myLocation;     // our bot's location
	public Point2D.Double _enemyLocation;  // enemy bot's location

	public ArrayList _enemyWaves;
	public ArrayList _surfDirections;
	public ArrayList _surfAbsBearings;

	int  _ramCounter;

	public static double _oppEnergy = 100.0; //energy enemy has at beginning of the round

	/** This is a rectangle that represents an 800x600 battle field,
	 * used for a simple, iterative WallSmoothing method (by PEZ).
	 * If you're not familiar with WallSmoothing, the wall stick indicates
	 * the amount of space we try to always have on either end of the tank
	 * (extending straight out the front or back) before touching a wall.
	 */
	public static Rectangle2D.Double _fieldRect
	= new java.awt.geom.Rectangle2D.Double(18, 18, 764, 564);

	public static double WALL_STICK = 160;

	public void run() {

		_enemyWaves = new ArrayList();
		_surfDirections = new ArrayList();
		_surfAbsBearings = new ArrayList();

		setAdjustGunForRobotTurn(true);
		setAdjustRadarForGunTurn(true);

		do {
			turnRadarRightRadians(Double.POSITIVE_INFINITY);
		} while (true);

	}

	public void onScannedRobot(ScannedRobotEvent e) 
	{
		//Gathering DATA for the basic surfer
		_myLocation = new Point2D.Double(getX(), getY());

		double lateralVelocity = getVelocity()*Math.sin(e.getBearingRadians());
		double absBearing = e.getBearingRadians() + getHeadingRadians();

		setTurnRadarRightRadians(Utils.normalRelativeAngle(absBearing 
				- getRadarHeadingRadians()) * 2);

		_surfDirections.add(0,
				new Integer((lateralVelocity >= 0) ? 1 : -1));
		_surfAbsBearings.add(0, new Double(absBearing + Math.PI));


		double bulletPower = _oppEnergy - e.getEnergy();
		if (bulletPower < 3.01 && bulletPower > 0.09
				&& _surfDirections.size() > 2) {
			EnemyWave ew = new EnemyWave();
			ew.fireTime = getTime() - 1;
			ew.bulletVelocity = bulletVelocity(bulletPower);
			ew.distanceTraveled = bulletVelocity(bulletPower);
			ew.direction = ((Integer)_surfDirections.get(2)).intValue();
			ew.directAngle = ((Double)_surfAbsBearings.get(2)).doubleValue();
			ew.fireLocation = (Point2D.Double)_enemyLocation.clone(); // last tick

			_enemyWaves.add(ew);
		}

		_oppEnergy = e.getEnergy();

		// update after EnemyWave detection, because that needs the previous
		// enemy location as the source of the wave
		_enemyLocation = project(_myLocation, absBearing, e.getDistance());

		updateWaves();
		doSurfing();


		//***********************SET UP *****************************
		double v1;

		//***********************MOVEMENT************************
		//stupid question - what makes this robot move? 


		//velocityTrick (idea from Python)
		if(_oppEnergy > (_oppEnergy = e.getEnergy()))
		{
			setMaxVelocity(Math.random() * 8 + 3); // minimum velocity I want is 3
		}

		//Pez's wall smoothing code with adaptation to make it hug walls clockwise
		//original wallhugging code is at http://robowiki.net/wiki/Talk:Wall_Smoothing/Implementations
		v1 = getHeadingRadians() + Math.PI/2 + Math.PI/2; //I am trying to maintain my current heading


		while (!new Rectangle2D.Double(20,20,760,560).contains(getX() + Math.sin(v1) * 160, getY() + Math.cos(v1) * 160)) v1 += .1;	
		v1 -= getHeadingRadians();

		if (v1 > Math.PI/2) 
		{
			v1 += Math.PI;
			setBack(100); //this could be improved! 

		} else setAhead(100); //are there other things the smoothhugger could do instead of going ahead and back?

		setTurnRightRadians(Utils.normalRelativeAngle(v1)); //normalization happens only once


		_oppEnergy = e.getEnergy();
		//_enemyLocation = project(_myLocation, absBearing, e.getDistance());
		//updateWaves();
		//doSurfing();


		//********************GUN**********************
		//random linear gun from RaikoNano

		setTurnGunRightRadians(Utils.normalRelativeAngle((v1 = getHeadingRadians() + e.getBearingRadians()) + 
				Math.random() * e.getVelocity() / 
				13 * Math.sin(e.getHeadingRadians() - v1) - getGunHeadingRadians()));

		setFire(2);

		//*****************RADAR***********************
		//Basic radar used in nearly every NanoBot
		setTurnRadarLeftRadians(getRadarTurnRemaining());

	}


	public void onHitByBullet(HitByBulletEvent e) {
		// If the _enemyWaves collection is empty, we must have missed the
		// detection of this wave somehow.
		if (!_enemyWaves.isEmpty()) {
			Point2D.Double hitBulletLocation = new Point2D.Double(
					e.getBullet().getX(), e.getBullet().getY());
			EnemyWave hitWave = null;

			// look through the EnemyWaves, and find one that could've hit us.
			for (int x = 0; x < _enemyWaves.size(); x++) {
				EnemyWave ew = (EnemyWave)_enemyWaves.get(x);

				if (Math.abs(ew.distanceTraveled -
						_myLocation.distance(ew.fireLocation)) < 50
						&& Math.round(bulletVelocity(e.getBullet().getPower()) * 10)
						== Math.round(ew.bulletVelocity * 10)) {
					hitWave = ew;
					break;
				}
			}

			if (hitWave != null) {
				logHit(hitWave, hitBulletLocation);

				// We can remove this wave now, of course.
				_enemyWaves.remove(_enemyWaves.lastIndexOf(hitWave));
			}
		}
	}

	public void onHitRobot(HitRobotEvent e) 
	{
		_ramCounter++;

		// If he's in front of us, set back up a bit.
		if (e.getBearing() > -90 && e.getBearing() < 90) {
			back(100);
		} // else he's in back of us, so set ahead a bit.
		else {
			ahead(100);
		}
	}
// This is another possible option for onHitRobot from Tracker Robot

/*	public void onHitRobot(HitRobotEvent e) {
		// Only print if he's not already our target.
		if (trackName != null && !trackName.equals(e.getName())) {
			out.println("Tracking " + e.getName() + " due to collision");
		}
		// Set the target
		trackName = e.getName();
		// Back up a bit.
		// Note:  We won't get scan events while we're doing this!
		// An AdvancedRobot might use setBack(); execute();
		gunTurnAmt = normalRelativeAngleDegrees(e.getBearing() + (getHeading() - getRadarHeading()));
		turnGunRight(gunTurnAmt);
		fire(3);
		back(50);
	}*/

	/*public void onBulletHitBullet(BulletHitBulletEvent e) {
    logAndRemoveWave(new Point2D.Double(e.getBullet().getX(),
        e.getBullet().getY()));
}*/


	public void updateWaves() {
		for (int x = 0; x < _enemyWaves.size(); x++) {
			EnemyWave ew = (EnemyWave)_enemyWaves.get(x);

			ew.distanceTraveled = (getTime() - ew.fireTime) * ew.bulletVelocity;
			if (ew.distanceTraveled >
			_myLocation.distance(ew.fireLocation) + 50) {
				_enemyWaves.remove(x);
				x--;
			}
		}
	}

	public EnemyWave getClosestSurfableWave() {
		double closestDistance = 50000; // I just use some very big number here
		EnemyWave surfWave = null;

		for (int x = 0; x < _enemyWaves.size(); x++) {
			EnemyWave ew = (EnemyWave)_enemyWaves.get(x);
			double distance = _myLocation.distance(ew.fireLocation)
					- ew.distanceTraveled;

			if (distance > ew.bulletVelocity && distance < closestDistance) {
				surfWave = ew;
				closestDistance = distance;
			}
		}

		return surfWave;
	}

	// Given the EnemyWave that the bullet was on, and the point where we
	// were hit, calculate the index into our stat array for that factor.
	public static int getFactorIndex(EnemyWave ew, Point2D.Double targetLocation) {
		double offsetAngle = (absoluteBearing(ew.fireLocation, targetLocation)
				- ew.directAngle);
		double factor = Utils.normalRelativeAngle(offsetAngle)
				/ maxEscapeAngle(ew.bulletVelocity) * ew.direction;

		return (int)limit(0,
				(factor * ((BINS - 1) / 2)) + ((BINS - 1) / 2),
				BINS - 1);
	}

	// Given the EnemyWave that the bullet was on, and the point where we
	// were hit, update our stat array to reflect the danger in that area.
	public void logHit(EnemyWave ew, Point2D.Double targetLocation) {
		int index = getFactorIndex(ew, targetLocation);

		for (int x = 0; x < BINS; x++) {
			// for the spot bin that we were hit on, add 1;
			// for the bins next to it, add 1 / 2;
			// the next one, add 1 / 5; and so on...
			_surfStats[x] += 1.0 / (Math.pow(index - x, 2) + 1);
		}
	}

	public Point2D.Double predictPosition(EnemyWave surfWave, int direction) {
		Point2D.Double predictedPosition = (Point2D.Double)_myLocation.clone();
		double predictedVelocity = getVelocity();
		double predictedHeading = getHeadingRadians();
		double maxTurning, moveAngle, moveDir;

		int counter = 0; // number of ticks in the future
		boolean intercepted = false;

		do {    // the rest of these code comments are rozu's
			moveAngle =
					wallSmoothing(predictedPosition, absoluteBearing(surfWave.fireLocation,
							predictedPosition) + (direction * (Math.PI/2)), direction)
							- predictedHeading;
			moveDir = 1;

			if(Math.cos(moveAngle) < 0) {
				moveAngle += Math.PI;
				moveDir = -1;
			}

			moveAngle = Utils.normalRelativeAngle(moveAngle);

			// maxTurning is built in like this, you can't turn more then this in one tick
			maxTurning = Math.PI/720d*(40d - 3d*Math.abs(predictedVelocity));
			predictedHeading = Utils.normalRelativeAngle(predictedHeading
					+ limit(-maxTurning, moveAngle, maxTurning));

			// this one is nice ;). if predictedVelocity and moveDir have
			// different signs you want to breack down
			// otherwise you want to accelerate (look at the factor "2")
			predictedVelocity += 
					(predictedVelocity * moveDir < 0 ? 2*moveDir : moveDir);
			predictedVelocity = limit(-8, predictedVelocity, 8);

			// calculate the new predicted position
			predictedPosition = project(predictedPosition, predictedHeading, 
					predictedVelocity);

			counter++;

			if (predictedPosition.distance(surfWave.fireLocation) <
					surfWave.distanceTraveled + (counter * surfWave.bulletVelocity)
					+ surfWave.bulletVelocity) {
				intercepted = true;
			}
		} while(!intercepted && counter < 500);

		return predictedPosition;
	}

	public double checkDanger(EnemyWave surfWave, int direction) {
		int index = getFactorIndex(surfWave,
				predictPosition(surfWave, direction));

		return _surfStats[index];
	}

	public void doSurfing() {
		EnemyWave surfWave = getClosestSurfableWave();

		if (surfWave == null) { return; }

		double dangerLeft = checkDanger(surfWave, -1);
		double dangerRight = checkDanger(surfWave, 1);

		double goAngle = absoluteBearing(surfWave.fireLocation, _myLocation);
		if (dangerLeft < dangerRight) {
			goAngle = wallSmoothing(_myLocation, goAngle - (Math.PI/2), -1);
		} else {
			goAngle = wallSmoothing(_myLocation, goAngle + (Math.PI/2), 1);
		}

		setBackAsFront(this, goAngle);
	}


	class EnemyWave {
		Point2D.Double fireLocation;
		long fireTime;
		double bulletVelocity, directAngle, distanceTraveled;
		int direction;

		public EnemyWave() { }
	}

	public double wallSmoothing(Point2D.Double botLocation, double angle, int orientation) {
		while (!_fieldRect.contains(project(botLocation, angle, WALL_STICK))) {
			angle += orientation*0.05;
		}
		return angle;
	}

	public static Point2D.Double project(Point2D.Double sourceLocation, 
			double angle, double length) {
		return new Point2D.Double(sourceLocation.x + Math.sin(angle) * length,
				sourceLocation.y + Math.cos(angle) * length);
	}

	public static double absoluteBearing(Point2D.Double source, Point2D.Double target) {
		return Math.atan2(target.x - source.x, target.y - source.y);
	}

	public static double limit(double min, double value, double max) {
		return Math.max(min, Math.min(value, max));
	}

	public static double bulletVelocity(double power) {
		return (20.0 - (3.0*power));
	}

	public static double maxEscapeAngle(double velocity) {
		return Math.asin(8.0/velocity);
	}

	public static void setBackAsFront(AdvancedRobot robot, double goAngle) {
		double angle =
				Utils.normalRelativeAngle(goAngle - robot.getHeadingRadians());
		if (Math.abs(angle) > (Math.PI/2)) {
			if (angle < 0) {
				robot.setTurnRightRadians(Math.PI + angle);
			} else {
				robot.setTurnLeftRadians(Math.PI - angle);
			}
			robot.setBack(100);
		} else {
			if (angle < 0) {
				robot.setTurnLeftRadians(-1*angle);
			} else {
				robot.setTurnRightRadians(angle);
			}
			robot.setAhead(100);
		}
	}



}
